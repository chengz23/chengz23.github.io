<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于 MT S的一些思考和介绍</title>
    <link href="/2025/04/21/%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/04/21/%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="时空预测任务理解与思考"><a href="#时空预测任务理解与思考" class="headerlink" title="时空预测任务理解与思考"></a>时空预测任务理解与思考</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近看了中科院在 TKDE 上发表的一篇关于时空数据挖掘的综述论文：[<strong>Exploring Progress in Multivariate Time Series Forecasting: Comprehensive Benchmarking and Heterogeneity Analysis</strong>]。这篇文章让我对时空预测任务有了更深的理解。本篇博客主要是对这篇综述的总结和一些个人的思考。</p><hr><h2 id="二、什么是-MTS？"><a href="#二、什么是-MTS？" class="headerlink" title="二、什么是 MTS？"></a>二、什么是 MTS？</h2><p><strong>MTS</strong>（Multivariate Time Series）即<strong>多变量时间序列</strong>，指由多个相互关联的变量组成的、有时间顺序的数据集合。它广泛应用于金融、气象、交通、医疗等领域。</p><p>在 MTS 预测中，有两个核心任务：</p><ul><li><strong>LTSF（Long-Term Series Forecasting）</strong>：关注长期预测，建模长期依赖；</li><li><strong>STF（Spatio-Temporal Forecasting）</strong>：关注时空建模，通过捕捉空间相关性提升预测性能。</li></ul><h3 id="LTSF-模型特点："><a href="#LTSF-模型特点：" class="headerlink" title="LTSF 模型特点："></a>LTSF 模型特点：</h3><ul><li>序列层级相关建模（Series-level correlations）</li><li>频率域建模（Frequency-based methods）</li><li>Patch-based Transformer 等模型</li></ul><h3 id="STF-模型特点："><a href="#STF-模型特点：" class="headerlink" title="STF 模型特点："></a>STF 模型特点：</h3><ul><li>结合卷积网络、图卷积网络与序列模型，形成时空神经网络（如 STGNN、TCN）</li></ul><h3 id="常用指标："><a href="#常用指标：" class="headerlink" title="常用指标："></a>常用指标：</h3><ul><li><strong>绝对误差指标</strong>：MAE、MSE、RMSE</li><li><strong>相对误差指标</strong>：MAPE、WAPE、SMAPE</li></ul><hr><h2 id="三、训练与优化设置"><a href="#三、训练与优化设置" class="headerlink" title="三、训练与优化设置"></a>三、训练与优化设置</h2><h3 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h3><ul><li>常用归一化方法：<ul><li>Min-Max 归一化</li><li>Z-score 标准化（多数研究采用）</li></ul></li></ul><h3 id="训练技巧："><a href="#训练技巧：" class="headerlink" title="训练技巧："></a>训练技巧：</h3><ul><li><strong>Masked MAE</strong> 通常比普通 MAE 更有效；</li><li>可选技巧包括：<ul><li>梯度裁剪（Gradient Clipping）</li><li>课程学习（Curriculum Learning）</li><li>……</li></ul></li></ul><hr><h2 id="四、不同数据集特点与模型选择建议"><a href="#四、不同数据集特点与模型选择建议" class="headerlink" title="四、不同数据集特点与模型选择建议"></a>四、不同数据集特点与模型选择建议</h2><p>高级模型通常具备较强的拟合能力与归纳偏置，适用于特定模式；而基础模型（如线性模型）泛化能力更强，适用于模式不明显的场景。</p><h3 id="1-时间建模与模型选择"><a href="#1-时间建模与模型选择" class="headerlink" title="1. 时间建模与模型选择"></a>1. 时间建模与模型选择</h3><p>可将数据集按时间模式划分为三类：</p><table><thead><tr><th>时间模式类型</th><th>建议模型类型</th><th>原因说明</th></tr></thead><tbody><tr><td>模式稳定（stable）</td><td>高级神经网络</td><td>可学习复杂的周期性与模式</td></tr><tr><td>分布漂移明显</td><td>基础神经网络</td><td>高级模型容易过拟合</td></tr><tr><td>无明确模式</td><td>基础神经网络</td><td>拟合能力强反而容易学到虚假特征</td></tr></tbody></table><blockquote><p>✅ <strong>总结：</strong> 模式稳定数据适合高级模型；模式漂移或不明确时，基础模型可能更稳健。</p></blockquote><hr><h3 id="2-空间建模与模型选择"><a href="#2-空间建模与模型选择" class="headerlink" title="2. 空间建模与模型选择"></a>2. 空间建模与模型选择</h3><p>将数据集按空间特性划分为两类：</p><ul><li><strong>存在空间样本不可区分性</strong>（Significant Spatial Sample Indistinguishability）</li><li><strong>不存在空间样本不可区分性</strong></li></ul><p><strong>空间不可区分性</strong>是指：在相同时间点，不同位置的历史观测数据非常相似，但其未来演化却存在显著差异。这种异质性使得简单模型（如 MLP、RNN）难以区分不同空间位置的预测。</p><blockquote><p>与时间建模不同，<strong>空间依赖更难建模与评估</strong>，图卷积网络（GCNs）虽常用于空间建模，但对空间异质性的理解仍有待深入。</p></blockquote><h4 id="指标推荐："><a href="#指标推荐：" class="headerlink" title="指标推荐："></a>指标推荐：</h4><p>综述中推荐使用 <strong>r1 和 r2</strong> 两个指标量化空间不可区分性（可参考 STID、ST-Norm 的设计思路）。</p><h4 id="建议总结："><a href="#建议总结：" class="headerlink" title="建议总结："></a>建议总结：</h4><table><thead><tr><th>空间特性类型</th><th>建议做法</th></tr></thead><tbody><tr><td>不存在显著空间不可区分性</td><td>无需刻意建模空间依赖</td></tr><tr><td>存在显著空间不可区分性</td><td>需要显式建模异质性，可显著提升性能</td></tr></tbody></table><hr><h2 id="五、个人思考"><a href="#五、个人思考" class="headerlink" title="五、个人思考"></a>五、个人思考</h2><p>这篇综述提供了系统的分析框架来理解不同模型在不同数据分布下的表现，对于今后选择模型、设计实验具有很强的指导意义。</p><p>尤其是对<strong>空间不可区分性</strong>的定义与量化方式，弥补了当前研究中对于“空间依赖”缺乏定量分析的不足，也让我在今后的研究中会更加重视数据本身的异质性特征。</p><hr><p><em>写于清华校园某个夜晚 🌙</em></p>]]></content>
    
    
    <categories>
      
      <category>时空数据挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时空数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion 学习路径指南!</title>
    <link href="/2025/04/16/Diffusion%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/"/>
    <url>/2025/04/16/Diffusion%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#diffusion-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%A2%B3%E7%90%86">Diffusion 学习路径梳理</a><ul><li><a href="#1-diffusion-models-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90">1. Diffusion Models 入门教程推荐</a><ul><li><a href="#-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">🧑‍🏫 基础入门教程</a></li><li><a href="#-%E5%BA%94%E7%94%A8%E4%B8%8E%E7%BB%BC%E8%BF%B0">📚 应用与综述</a></li></ul></li><li><a href="#2-diffusion-models-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%BF%85%E8%AF%BB">2. Diffusion Models 基础入门必读</a><ul><li><a href="#-%E6%A0%B8%E5%BF%83%E8%AE%BA%E6%96%87">📌 核心论文</a></li><li><a href="#%EF%B8%8F-%E9%87%87%E6%A0%B7%E4%B8%8E%E5%8A%A0%E9%80%9F">⚙️ 采样与加速</a></li><li><a href="#-%E6%BD%9C%E7%A9%BA%E9%97%B4%E5%BB%BA%E6%A8%A1">🧠 潜空间建模</a></li></ul></li><li><a href="#3-diffusion-models-%E8%BF%9B%E9%98%B6%E9%98%85%E8%AF%BB">3. Diffusion Models 进阶阅读</a><ul><li><a href="#-guidance%E5%BC%95%E5%AF%BC%E6%9C%BA%E5%88%B6">🔍 Guidance（引导机制）</a></li><li><a href="#-flow-matching-%E6%96%B9%E6%B3%95">🔁 Flow Matching 方法</a></li><li><a href="#-rectified-flow-%E5%8F%8A%E6%94%B9%E8%BF%9B">🚀 Rectified Flow 及改进</a></li><li><a href="#-schr%C3%B6dinger-bridge-%E6%96%B9%E6%B3%95">🔗 Schrödinger Bridge 方法</a></li><li><a href="#-consistency-%E6%A8%A1%E5%9E%8B">🔄 Consistency 模型</a></li></ul></li></ul></li></ul><h1 id="Diffusion-学习路径梳理"><a href="#Diffusion-学习路径梳理" class="headerlink" title="Diffusion 学习路径梳理"></a>Diffusion 学习路径梳理</h1><p>本博客旨在系统梳理 Diffusion 模型的学习路径，构建清晰的学习框架，便于本科生和研究生初学者快速入门并逐步进阶。</p><hr><!-- toc --><h2 id="1-Diffusion-Models-入门教程推荐"><a href="#1-Diffusion-Models-入门教程推荐" class="headerlink" title="1. Diffusion Models 入门教程推荐"></a>1. Diffusion Models 入门教程推荐</h2><p>适合初学者阅读，内容通俗易懂、涵盖基础与前沿：</p><h3 id="🧑‍🏫-基础入门教程"><a href="#🧑‍🏫-基础入门教程" class="headerlink" title="🧑‍🏫 基础入门教程"></a>🧑‍🏫 基础入门教程</h3><ul><li><p><a href="https://arxiv.org/abs/2403.18103"><strong>Tutorial on Diffusion Models for Imaging and Vision</strong></a><br>对 Diffusion 各类公式进行了系统汇总，并分析了与 VAE 等其他生成模型的联系。</p></li><li><p><a href="https://arxiv.org/abs/2208.11970"><strong>Understanding Diffusion Models: A Unified Perspective</strong></a><br>从 deterministic sampler 角度出发，进一步引入 flow matching，兼具基础与前沿性。</p></li><li><p><a href="https://arxiv.org/abs/2406.08929"><strong>Step-by-Step Diffusion: An Elementary Tutorial</strong></a><br>逐步拆解 diffusion 原理，深入浅出，适合快速构建基本认知。</p></li></ul><h3 id="📚-应用与综述"><a href="#📚-应用与综述" class="headerlink" title="📚 应用与综述"></a>📚 应用与综述</h3><ul><li><a href="https://arxiv.org/abs/2209.00796"><strong>Diffusion Models: A Comprehensive Survey of Methods and Applications</strong></a><br>对 Diffusion 各种应用方向进行了全面总结，适合查阅使用场景。</li></ul><hr><h2 id="2-Diffusion-Models-基础入门必读"><a href="#2-Diffusion-Models-基础入门必读" class="headerlink" title="2. Diffusion Models 基础入门必读"></a>2. Diffusion Models 基础入门必读</h2><h3 id="📌-核心论文"><a href="#📌-核心论文" class="headerlink" title="📌 核心论文"></a>📌 核心论文</h3><ul><li><p><strong>DDPM</strong>: <a href="https://arxiv.org/abs/2006.11239">Denoising Diffusion Probabilistic Models</a><br>虽非最早提出 Diffusion 思路，但首次实现并获得成功，意义重大。</p></li><li><p><strong>NCSN</strong>: <a href="https://arxiv.org/abs/1907.05600">Generative Modeling by Estimating Gradients of the Data Distribution</a><br>使用 score matching 来估计数据分布梯度，开启了 score-based 模型的路径。</p></li><li><p><strong>Score-SDE</strong>: <a href="https://arxiv.org/abs/2011.13456">Score-Based Generative Modeling through Stochastic Differential Equations</a><br>用 SDE 统一前两类方法，为 diffusion 提供了坚实理论基础。</p></li><li><p><strong>EDM</strong>: <a href="https://arxiv.org/abs/2206.00364">Energy-Based Generative Modeling with Diffusion Processes</a><br>从 noise schedule 入手，统一现有 Diffusion 模型框架。</p></li></ul><h3 id="⚙️-采样与加速"><a href="#⚙️-采样与加速" class="headerlink" title="⚙️ 采样与加速"></a>⚙️ 采样与加速</h3><ul><li><p><strong>DDIM</strong>: <a href="https://arxiv.org/abs/2010.02502">Denoising Diffusion Implicit Models</a><br>跳步采样技术，摆脱马尔科夫链，显著提升采样速度。</p></li><li><p><strong>DPM-Solver</strong>: <a href="https://arxiv.org/abs/2206.00927">A Fast ODE Solver for Diffusion Probabilistic Models</a><br>另一种采样加速方式，基于 ODE 视角。</p></li></ul><h3 id="🧠-潜空间建模"><a href="#🧠-潜空间建模" class="headerlink" title="🧠 潜空间建模"></a>🧠 潜空间建模</h3><ul><li><strong>Latent Diffusion（LDM）</strong>:  <ul><li><a href="https://arxiv.org/abs/2106.05931">Score-based Generative Modeling in Latent Space</a><br>引入 encoder-decoder，将 Diffusion 模型迁移至 latent space。</li><li><a href="https://arxiv.org/abs/2112.10752">High-Resolution Image Synthesis with Latent Diffusion Models</a><br>即 Stable Diffusion 原始论文，进一步优化模块训练流程，提高图像质量。</li></ul></li></ul><hr><h2 id="3-Diffusion-Models-进阶阅读"><a href="#3-Diffusion-Models-进阶阅读" class="headerlink" title="3. Diffusion Models 进阶阅读"></a>3. Diffusion Models 进阶阅读</h2><h3 id="🔍-Guidance（引导机制）"><a href="#🔍-Guidance（引导机制）" class="headerlink" title="🔍 Guidance（引导机制）"></a>🔍 Guidance（引导机制）</h3><ul><li><a href="https://arxiv.org/abs/2105.05233"><strong>Diffusion Models Beat GANs on Image Synthesis</strong></a>  </li><li><a href="https://arxiv.org/abs/2207.12598"><strong>Classifier-Free Diffusion Guidance</strong></a></li></ul><h3 id="🔁-Flow-Matching-方法"><a href="#🔁-Flow-Matching-方法" class="headerlink" title="🔁 Flow Matching 方法"></a>🔁 Flow Matching 方法</h3><ul><li><a href="https://arxiv.org/abs/2210.02747"><strong>Flow Matching for Generative Modeling</strong></a></li></ul><h3 id="🚀-Rectified-Flow-及改进"><a href="#🚀-Rectified-Flow-及改进" class="headerlink" title="🚀 Rectified Flow 及改进"></a>🚀 Rectified Flow 及改进</h3><ul><li><a href="https://arxiv.org/abs/2209.03003"><strong>Flow Straight and Fast: Learning to Generate and Transfer Data with Rectified Flow</strong></a>  </li><li><a href="https://arxiv.org/abs/2405.20320"><strong>Improving the Training of Rectified Flows</strong></a></li></ul><h3 id="🔗-Schrodinger-Bridge-方法"><a href="#🔗-Schrodinger-Bridge-方法" class="headerlink" title="🔗 Schrödinger Bridge 方法"></a>🔗 Schrödinger Bridge 方法</h3><ul><li><a href="https://arxiv.org/abs/2110.11291"><strong>Likelihood Training of Schrödinger Bridge using Forward-Backward SDEs Theory</strong></a></li></ul><h3 id="🔄-Consistency-模型"><a href="#🔄-Consistency-模型" class="headerlink" title="🔄 Consistency 模型"></a>🔄 Consistency 模型</h3><ul><li><a href="https://arxiv.org/abs/2303.01469"><strong>Consistency Models</strong></a></li></ul><hr><p>如有补充推荐或建议，欢迎交流！🌱</p>]]></content>
    
    
    <categories>
      
      <category>Diffusion Models</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World, My First Blog!</title>
    <link href="/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在本科和研究生期间，我看过很多大佬的个人网站，每次浏览他们的博客时，总是非常佩服，并且一直想建立一个属于自己的网站，记录一些技术学习和生活中的点滴感悟。不过，由于工作和生活中的琐事总是很多，再加上自己是严重拖延症患者，迟迟没有付诸行动。直到最近，终于下定决心开始了这个项目。虽然现在已经是研二了，但正如那句话说的：“种一棵树最好的时间是十年前，其次是现在。”</p><p>在这篇文章里，主要写一下自己搭建网站的过程，以此纪念个人网站的诞生。</p><h2 id="二、搭建流程"><a href="#二、搭建流程" class="headerlink" title="二、搭建流程"></a>二、搭建流程</h2><h3 id="1-建立-Github-仓库"><a href="#1-建立-Github-仓库" class="headerlink" title="1. 建立 Github 仓库"></a>1. 建立 Github 仓库</h3><p>在注册 GitHub 账号后，首先创建一个新的仓库，用作你本地博客仓库的部署。仓库名需要遵循特定格式：<code>用户名.github.io</code>，例如：<br><a href="https://github.com/chengz23/chengz23.github.io">https://github.com/chengz23/chengz23.github.io</a></p><p>请特别注意，仓库名必须是 “用户名.github.io” 这种格式，这样才能通过访问 <code>用户名.github.io</code> 来查看你的网站。如果仓库名不符合这个格式，网站的访问地址将变为 <code>用户名.github.io/仓库名</code>。从美学和简洁性的角度来看，大家自然还是偏好前者，哈哈。<br>创建完成后，你就可以直接在浏览器中输入 <code>用户名.github.io</code> 来访问自己的网站啦。</p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><p>Git 作为一款分布式版本控制系统，在代码管理与协作开发领域应用广泛。在本教程里，我们会借助 Git 将本地的 Hexo 项目（Hexo 是用于搭建个人博客的项目，后续会详细介绍）推送至 GitHub 仓库，以实现代码的在线存储与便捷访问。</p><p>首先，Windows 用户可从 <a href="https://git-scm.com/downloads">Git 官网</a> 下载并安装 Git。 安装过程建议采用默认配置，不过有一点需要留意：在安装期间，会出现一个关于是否选择 <strong>MinTTY 终端模拟器</strong> 的选项。若你期望拥有功能更强大的终端界面，可勾选此选项；若不勾选，将使用 Windows 自带的 cmd 终端来显示 Git Bash。其余选项保持默认即可。安装完成后，Git 会自动添加到系统的环境变量中。<br>安装完成后，可通过以下操作检查 Git 是否安装成功：打开 cmd（命令行终端），输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Git 的版本信息。<br>在开始使用 Git 之前，我们需要进行一些个人信息的配置，从而绑定 GitHub 账号。打开 cmd，依次输入以下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;chengz23&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>user.name</code> 是你在 GitHub 上的用户名，<code>user.email</code> 是你注册 GitHub 账号时使用的邮箱地址。这些配置有助于 Git 识别你的身份，确保你提交的代码能与 GitHub 账户关联起来。 </p><h3 id="3-生成-SSH-密钥与-GitHub-账户关联"><a href="#3-生成-SSH-密钥与-GitHub-账户关联" class="headerlink" title="3. 生成 SSH 密钥与 GitHub 账户关联"></a>3. 生成 SSH 密钥与 GitHub 账户关联</h3><p>SSH（Secure Shell）是一种加密网络协议，用于在网络中安全地传输数据。在 Git 中，SSH 用于在本地和远程仓库之间建立安全连接，以便进行代码的推送和拉取。因此，我们需要生成 SSH 密钥，并将公钥添加到 GitHub 账户中。<br>在 cmd 中输入以下命令，生成 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>完成后，在提示路径下找到 .ssh 文件夹中的 id_rsa.pub 公钥文件，用记事本打开拷贝。<br>在 GitHub 个人设置中找到 SSH，新建，输入 Key。<br>(如果之前和服务器连接时已经生成过 SSH 密钥，无需再次生成直接将公钥添加到 GitHub 账户中即可。)</p><h3 id="4-安装-Node-js"><a href="#4-安装-Node-js" class="headerlink" title="4. 安装 Node.js"></a>4. 安装 Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以让 JavaScript 代码在服务器端运行。在本教程中，我们将使用 Node.js 来安装 Hexo，以及在本地预览和生成博客网站。<br>首先，从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装 Node.js。<br>安装完成后，可通过以下操作检查 Node.js 是否安装成功：打开 cmd，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Node.js 和 npm 的版本信息。</p><h3 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5. 安装 Hexo"></a>5. 安装 Hexo</h3><p>Hexo 是一款基于 Node.js 开发的博客框架，以其快速、简洁和高效著称。借助 Hexo，用户能够轻松搭建个人博客网站，并且它对 Markdown 语法提供良好支持，这意味着在写作时无需进行繁琐的排版工作，极大地提升了博客创作的效率。</p><p>以下是安装 Hexo 的详细步骤：</p><ol><li><strong>安装 Hexo 命令行工具</strong>：打开安装后的Git Bash，输入以下命令并执行，以全局安装 Hexo 命令行工具：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><strong>检查安装是否成功</strong>：安装完成后，为确认 Hexo 是否正确安装，再次打开 cmd，输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure>若安装成功，命令行界面将显示出 Hexo 的版本信息。</li><li><strong>创建并初始化 Hexo 项目</strong>：<ul><li>在电脑的任意位置，新建一个名为 <code>MyBlog</code> 的文件夹，用于存放 Hexo 项目。</li><li>在Git Bash，使用 <code>cd *:/**/MyBlog</code> 命令（需将 <code>*:/**</code> 替换为实际的路径）进入该文件夹。</li><li>在文件夹目录下，输入以下命令，初始化 Hexo 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure>执行该命令后，会在 <code>MyBlog</code> 文件夹下生成一个名为 <code>blog</code> 的 Hexo 项目。</li></ul></li><li><strong>进入项目目录并安装依赖</strong>：<ul><li>使用 <code>cd blog</code> 命令进入刚刚生成的 <code>blog</code> 项目文件夹，此时可以查看项目的目录结构。</li><li>在项目目录下，输入以下命令，安装 Hexo 运行所需的依赖项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>生成本地预览</strong>：依赖安装完成后，输入以下命令，启动本地服务器，预览 Hexo 博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server 或 hexo s<br></code></pre></td></tr></table></figure>在浏览器中输入 <code>http://localhost:4000</code>，即可查看 Hexo 博客的本地预览效果。之后按下 <code>Ctrl + C</code> 即可终止预览。<br>通过以上步骤，你就可以成功安装并初步运行 Hexo 博客项目了。</li></ol><h3 id="6-编写博客文档"><a href="#6-编写博客文档" class="headerlink" title="6. 编写博客文档"></a>6. 编写博客文档</h3><p>在 Hexo 项目中，博客文档以 Markdown 文件的形式存在，用户可以通过编辑 Markdown 文件来撰写博客内容。在 Hexo 项目的 <code>source/_posts</code> 目录下，存放着所有的博客文档，每篇博客对应一个 Markdown 文件。<br>在 <code>source/_posts</code> 目录下，新建一个名为 <code>Hello-World.md</code> 的 Markdown 文件（正常来说<code>Hello-World.md</code>是已存在的），输入任意内容后保存。<br>在 <code>blog</code> 项目目录下，依次输入以下命令，生成静态页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean 或 hexo c // 清除缓存<br>hexo generate 或 hexo g // 生成静态页面<br>hexo server 或 hexo s // 启动本地服务器<br></code></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost:4000</code>，即可查看博客更改后的最新内容。之后按下 <code>Ctrl + C</code> 即可终止预览。</p><h3 id="7-配置与部署-Hexo-博客到-GitHub-Pages"><a href="#7-配置与部署-Hexo-博客到-GitHub-Pages" class="headerlink" title="7. 配置与部署 Hexo 博客到 GitHub Pages"></a>7. 配置与部署 Hexo 博客到 GitHub Pages</h3><h4 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置 _config.yml 文件"></a>配置 <code>_config.yml</code> 文件</h4><p>在 Hexo 项目的根目录下，找到并打开 <code>_config.yml</code> 文件。此文件是 Hexo 项目的重要配置文件，下面将对其中的部分关键配置项进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site 部分：你可以根据自己的需求自定义博客的名称、描述、关键词等信息</span><br><span class="hljs-comment"># URL 部分：请将链接替换为你自己的 GitHub Pages 地址，示例：https://chengz23.github.io</span><br><span class="hljs-comment"># Deployment 部分：配置部署相关信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-comment"># 请将此地址替换为你自己的仓库 git 地址，示例：git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-comment"># 分支名称，旧版本默认是 master，现在一般使用 main</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="安装-git-插件"><a href="#安装-git-插件" class="headerlink" title="安装 git 插件"></a>安装 git 插件</h4><p>在当前博客所在的目录，也就是 <code>*:/**/MyBlog</code> 目录下（注意将 <code>*:/**</code> 替换为实际的路径），执行以下命令来安装用于部署的 git 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h4><p>在 <code>blog</code> 项目目录下，按顺序输入以下命令，即可将博客部署到 GitHub Pages：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存，此命令可选择使用 hexo clean 或者 hexo c</span><br>hexo clean 或 hexo c<br><span class="hljs-comment"># 生成静态页面，可使用 hexo generate 或者 hexo g</span><br>hexo generate 或 hexo g<br><span class="hljs-comment"># 部署到 GitHub Pages，可使用 hexo deploy 或者 hexo d</span><br>hexo deploy 或 hexo d<br></code></pre></td></tr></table></figure><p>注意之后每次更新博客内容后，不需要执行 <code>hexo clean</code>, Hexo 会自动处理新文章与修改内容，在你运行 <code>hexo generate</code> 或者 <code>hexo g</code> 时，它会生成新的静态文件。如果在生成或者部署博客时碰到问题，像页面未更新、样式错乱等，很可能是缓存文件引发的。这时你可以运行 <code>hexo clean</code> 来清除缓存，然后重新生成静态文件。在更新博客主题之后，执行 <code>hexo clean</code> 可以避免旧主题文件残留，确保新主题正常显示。</p><h4 id="查看博客网站"><a href="#查看博客网站" class="headerlink" title="查看博客网站"></a>查看博客网站</h4><p>当部署完成后，打开浏览器，在地址栏输入你之前配置的 GitHub Pages 地址（例如 <code>https://chengz23.github.io</code> ，需替换为你自己的域名），就可以看到你的博客网站了。 </p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人网站搭建教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/26/hello-world/"/>
    <url>/2025/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
