<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World, My First Blog!</title>
    <link href="/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在本科和研究生期间，我看过很多大佬的个人网站，每次浏览他们的博客时，总是非常佩服，并且一直想建立一个属于自己的网站，记录一些技术学习和生活中的点滴感悟。不过，由于工作和生活中的琐事总是很多，再加上自己是严重拖延症患者，迟迟没有付诸行动。直到最近，终于下定决心开始了这个项目。虽然现在已经是研二了，但正如那句话说的：“种一棵树最好的时间是十年前，其次是现在。”</p><p>在这篇文章里，主要写一下自己搭建网站的过程，以此纪念个人网站的诞生。</p><h2 id="二、搭建流程"><a href="#二、搭建流程" class="headerlink" title="二、搭建流程"></a>二、搭建流程</h2><h3 id="1-建立-Github-仓库"><a href="#1-建立-Github-仓库" class="headerlink" title="1. 建立 Github 仓库"></a>1. 建立 Github 仓库</h3><p>在注册 GitHub 账号后，首先创建一个新的仓库，用作你本地博客仓库的部署。仓库名需要遵循特定格式：<code>用户名.github.io</code>，例如：<br><a href="https://github.com/chengz23/chengz23.github.io">https://github.com/chengz23/chengz23.github.io</a></p><p>请特别注意，仓库名必须是 “用户名.github.io” 这种格式，这样才能通过访问 <code>用户名.github.io</code> 来查看你的网站。如果仓库名不符合这个格式，网站的访问地址将变为 <code>用户名.github.io/仓库名</code>。从美学和简洁性的角度来看，大家自然还是偏好前者，哈哈。<br>创建完成后，你就可以直接在浏览器中输入 <code>用户名.github.io</code> 来访问自己的网站啦。</p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><p>Git 作为一款分布式版本控制系统，在代码管理与协作开发领域应用广泛。在本教程里，我们会借助 Git 将本地的 Hexo 项目（Hexo 是用于搭建个人博客的项目，后续会详细介绍）推送至 GitHub 仓库，以实现代码的在线存储与便捷访问。</p><p>首先，Windows 用户可从 <a href="https://git-scm.com/downloads">Git 官网</a> 下载并安装 Git。 安装过程建议采用默认配置，不过有一点需要留意：在安装期间，会出现一个关于是否选择 <strong>MinTTY 终端模拟器</strong> 的选项。若你期望拥有功能更强大的终端界面，可勾选此选项；若不勾选，将使用 Windows 自带的 cmd 终端来显示 Git Bash。其余选项保持默认即可。安装完成后，Git 会自动添加到系统的环境变量中。<br>安装完成后，可通过以下操作检查 Git 是否安装成功：打开 cmd（命令行终端），输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Git 的版本信息。<br>在开始使用 Git 之前，我们需要进行一些个人信息的配置，从而绑定 GitHub 账号。打开 cmd，依次输入以下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;chengz23&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>user.name</code> 是你在 GitHub 上的用户名，<code>user.email</code> 是你注册 GitHub 账号时使用的邮箱地址。这些配置有助于 Git 识别你的身份，确保你提交的代码能与 GitHub 账户关联起来。 </p><h3 id="3-生成-SSH-密钥与-GitHub-账户关联"><a href="#3-生成-SSH-密钥与-GitHub-账户关联" class="headerlink" title="3. 生成 SSH 密钥与 GitHub 账户关联"></a>3. 生成 SSH 密钥与 GitHub 账户关联</h3><p>SSH（Secure Shell）是一种加密网络协议，用于在网络中安全地传输数据。在 Git 中，SSH 用于在本地和远程仓库之间建立安全连接，以便进行代码的推送和拉取。因此，我们需要生成 SSH 密钥，并将公钥添加到 GitHub 账户中。<br>在 cmd 中输入以下命令，生成 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>完成后，在提示路径下找到 .ssh 文件夹中的 id_rsa.pub 公钥文件，用记事本打开拷贝。<br>在 GitHub 个人设置中找到 SSH，新建，输入 Key。<br>(如果之前和服务器连接时已经生成过 SSH 密钥，无需再次生成直接将公钥添加到 GitHub 账户中即可。)</p><h3 id="4-安装-Node-js"><a href="#4-安装-Node-js" class="headerlink" title="4. 安装 Node.js"></a>4. 安装 Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以让 JavaScript 代码在服务器端运行。在本教程中，我们将使用 Node.js 来安装 Hexo，以及在本地预览和生成博客网站。<br>首先，从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装 Node.js。<br>安装完成后，可通过以下操作检查 Node.js 是否安装成功：打开 cmd，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Node.js 和 npm 的版本信息。</p><h3 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5. 安装 Hexo"></a>5. 安装 Hexo</h3><p>Hexo 是一款基于 Node.js 开发的博客框架，以其快速、简洁和高效著称。借助 Hexo，用户能够轻松搭建个人博客网站，并且它对 Markdown 语法提供良好支持，这意味着在写作时无需进行繁琐的排版工作，极大地提升了博客创作的效率。</p><p>以下是安装 Hexo 的详细步骤：</p><ol><li><strong>安装 Hexo 命令行工具</strong>：打开安装后的Git Bash，输入以下命令并执行，以全局安装 Hexo 命令行工具：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><strong>检查安装是否成功</strong>：安装完成后，为确认 Hexo 是否正确安装，再次打开 cmd，输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure>若安装成功，命令行界面将显示出 Hexo 的版本信息。</li><li><strong>创建并初始化 Hexo 项目</strong>：<ul><li>在电脑的任意位置，新建一个名为 <code>MyBlog</code> 的文件夹，用于存放 Hexo 项目。</li><li>在Git Bash，使用 <code>cd *:/**/MyBlog</code> 命令（需将 <code>*:/**</code> 替换为实际的路径）进入该文件夹。</li><li>在文件夹目录下，输入以下命令，初始化 Hexo 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure>执行该命令后，会在 <code>MyBlog</code> 文件夹下生成一个名为 <code>blog</code> 的 Hexo 项目。</li></ul></li><li><strong>进入项目目录并安装依赖</strong>：<ul><li>使用 <code>cd blog</code> 命令进入刚刚生成的 <code>blog</code> 项目文件夹，此时可以查看项目的目录结构。</li><li>在项目目录下，输入以下命令，安装 Hexo 运行所需的依赖项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>生成本地预览</strong>：依赖安装完成后，输入以下命令，启动本地服务器，预览 Hexo 博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server 或 hexo s<br></code></pre></td></tr></table></figure>在浏览器中输入 <code>http://localhost:4000</code>，即可查看 Hexo 博客的本地预览效果。之后按下 <code>Ctrl + C</code> 即可终止预览。<br>通过以上步骤，你就可以成功安装并初步运行 Hexo 博客项目了。</li></ol><h3 id="6-编写博客文档"><a href="#6-编写博客文档" class="headerlink" title="6. 编写博客文档"></a>6. 编写博客文档</h3><p>在 Hexo 项目中，博客文档以 Markdown 文件的形式存在，用户可以通过编辑 Markdown 文件来撰写博客内容。在 Hexo 项目的 <code>source/_posts</code> 目录下，存放着所有的博客文档，每篇博客对应一个 Markdown 文件。<br>在 <code>source/_posts</code> 目录下，新建一个名为 <code>Hello-World.md</code> 的 Markdown 文件（正常来说<code>Hello-World.md</code>是已存在的），输入任意内容后保存。<br>在 <code>blog</code> 项目目录下，依次输入以下命令，生成静态页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean 或 hexo c // 清除缓存<br>hexo generate 或 hexo g // 生成静态页面<br>hexo server 或 hexo s // 启动本地服务器<br></code></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost:4000</code>，即可查看博客更改后的最新内容。之后按下 <code>Ctrl + C</code> 即可终止预览。</p><h3 id="7-配置与部署-Hexo-博客到-GitHub-Pages"><a href="#7-配置与部署-Hexo-博客到-GitHub-Pages" class="headerlink" title="7. 配置与部署 Hexo 博客到 GitHub Pages"></a>7. 配置与部署 Hexo 博客到 GitHub Pages</h3><h4 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置 _config.yml 文件"></a>配置 <code>_config.yml</code> 文件</h4><p>在 Hexo 项目的根目录下，找到并打开 <code>_config.yml</code> 文件。此文件是 Hexo 项目的重要配置文件，下面将对其中的部分关键配置项进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site 部分：你可以根据自己的需求自定义博客的名称、描述、关键词等信息</span><br><span class="hljs-comment"># URL 部分：请将链接替换为你自己的 GitHub Pages 地址，示例：https://chengz23.github.io</span><br><span class="hljs-comment"># Deployment 部分：配置部署相关信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-comment"># 请将此地址替换为你自己的仓库 git 地址，示例：git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-comment"># 分支名称，旧版本默认是 master，现在一般使用 main</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="安装-git-插件"><a href="#安装-git-插件" class="headerlink" title="安装 git 插件"></a>安装 git 插件</h4><p>在当前博客所在的目录，也就是 <code>*:/**/MyBlog</code> 目录下（注意将 <code>*:/**</code> 替换为实际的路径），执行以下命令来安装用于部署的 git 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h4><p>在 <code>blog</code> 项目目录下，按顺序输入以下命令，即可将博客部署到 GitHub Pages：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存，此命令可选择使用 hexo clean 或者 hexo c</span><br>hexo clean 或 hexo c<br><span class="hljs-comment"># 生成静态页面，可使用 hexo generate 或者 hexo g</span><br>hexo generate 或 hexo g<br><span class="hljs-comment"># 部署到 GitHub Pages，可使用 hexo deploy 或者 hexo d</span><br>hexo deploy 或 hexo d<br></code></pre></td></tr></table></figure><p>注意之后每次更新博客内容后，不需要执行 <code>hexo clean</code>, Hexo 会自动处理新文章与修改内容，在你运行 <code>hexo generate</code> 或者 <code>hexo g</code> 时，它会生成新的静态文件。如果在生成或者部署博客时碰到问题，像页面未更新、样式错乱等，很可能是缓存文件引发的。这时你可以运行 <code>hexo clean</code> 来清除缓存，然后重新生成静态文件。在更新博客主题之后，执行 <code>hexo clean</code> 可以避免旧主题文件残留，确保新主题正常显示。</p><h4 id="查看博客网站"><a href="#查看博客网站" class="headerlink" title="查看博客网站"></a>查看博客网站</h4><p>当部署完成后，打开浏览器，在地址栏输入你之前配置的 GitHub Pages 地址（例如 <code>https://chengz23.github.io</code> ，需替换为你自己的域名），就可以看到你的博客网站了。 </p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人网站搭建教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/26/hello-world/"/>
    <url>/2025/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
