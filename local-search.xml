<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IJCAI 爆破教程!</title>
    <link href="/2025/05/03/IJCAI%E7%88%86%E7%A0%B4%E6%95%99%E7%A8%8B/"/>
    <url>/2025/05/03/IJCAI%E7%88%86%E7%A0%B4%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="IJCAI-2025-投稿监控与经验总结"><a href="#IJCAI-2025-投稿监控与经验总结" class="headerlink" title="IJCAI 2025 投稿监控与经验总结"></a>IJCAI 2025 投稿监控与经验总结</h1><blockquote><p>投稿 IJCAI 2025 是一次难忘的经历，本文记录了我的投稿过程、实时评分监控、Meta-review 获取方式等一些实用的经验，希望对未来准备 IJCAI 的朋友有所帮助。</p></blockquote><hr><h2 id="📊-接受率与背景"><a href="#📊-接受率与背景" class="headerlink" title="📊 接受率与背景"></a>📊 接受率与背景</h2><p>本年度 IJCAI 2025 的接受量 &#x2F; 投稿量为：</p><ul><li><strong>接受量</strong>：1042</li><li><strong>投稿量</strong>：5404</li><li><strong>接受率</strong>：<strong>19.3%</strong></li></ul><p>相比往年低于 15% 的接受率，这一数字确实提升不少。不过，今年 CMT 和 IJCAI 的各种系统 bug 也让人哭笑不得……</p><hr><h2 id="📈-实时监控审稿人是否改分"><a href="#📈-实时监控审稿人是否改分" class="headerlink" title="📈 实时监控审稿人是否改分"></a>📈 实时监控审稿人是否改分</h2><p>为了能及时掌握评分变化，能够通过python脚本来<strong>实时监控 CMT 上的评分变动</strong>，并支持邮件提醒。</p><h3 id="🧠-原理"><a href="#🧠-原理" class="headerlink" title="🧠 原理"></a>🧠 原理</h3><p>利用 CMT 的 OData 接口，定时访问 ReviewViews 接口，记录当前的评分，并与之前抓取的结果做对比，一旦发生变动，通过邮箱提醒。</p><h3 id="⚠️-注意事项"><a href="#⚠️-注意事项" class="headerlink" title="⚠️ 注意事项"></a>⚠️ 注意事项</h3><ul><li>你需要在浏览器中登录 CMT，按 <code>F12</code> 打开开发者工具，在 <code>Application</code> 面板中获取你的 Cookie 信息。</li><li>脚本支持记录日志，并将评分变化写入 <code>ijcai_monitor_log.json</code> 文件。</li><li>支持邮件通知（使用 Outlook SMTP）。</li></ul><h3 id="💻-脚本源码"><a href="#💻-脚本源码" class="headerlink" title="💻 脚本源码"></a>💻 脚本源码</h3><details><summary>点击查看评分监控脚本源码</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.mime.multipart <span class="hljs-keyword">import</span> MIMEMultipart<br><span class="hljs-keyword">import</span> platform<br><br><span class="hljs-comment"># xxxx is the reviewer id (replace it with your own reviewer ID)</span><br>urls = &#123;<br>    <span class="hljs-number">641</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/ReviewViews(641)&quot;</span>, <span class="hljs-comment">#4</span><br>    <span class="hljs-number">5149</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/ReviewViews(5149)&quot;</span>, <span class="hljs-comment">#6</span><br>    <span class="hljs-number">15758</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/ReviewViews(15758)&quot;</span>, <span class="hljs-comment">#6</span><br>    <span class="hljs-number">19890</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/ReviewViews(19890)&quot;</span>, <span class="hljs-comment">#7</span><br>&#125;<br><br><span class="hljs-comment"># 初始评分状态（第一次抓到后自动初始化）</span><br>last_scores = &#123;&#125;<br><br><span class="hljs-comment"># 日志记录</span><br>log_data = &#123;<br>    <span class="hljs-string">&quot;start_time&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),<br>    <span class="hljs-string">&quot;papers&quot;</span>: &#123;&#125;,<br>    <span class="hljs-string">&quot;errors&quot;</span>: []<br>&#125;<br><br><span class="hljs-comment"># JSON日志文件路径</span><br>log_file = <span class="hljs-string">&quot;ijcai_monitor_log.json&quot;</span><br><br><span class="hljs-comment"># 如果日志文件已存在,加载之前的日志</span><br><span class="hljs-keyword">if</span> os.path.exists(log_file):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            log_data = json.load(f)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;无法加载现有日志文件: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 更新日志文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_log</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(log_file, <span class="hljs-string">&quot;w&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            json.dump(log_data, f, ensure_ascii=<span class="hljs-literal">False</span>, indent=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;无法更新日志文件: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># Cookie 与 Headers, 按F12获取（开发者模式下，应用栏）</span><br>cookies = &#123;<br>    <span class="hljs-string">&quot;MC1&quot;</span>: <span class="hljs-string">&quot;GUID=44928b063b3947518a67995891bf0044&amp;HASH=4492&amp;LV=202504&amp;V=4&amp;LU=1744614339104&quot;</span>,<br>    <span class="hljs-string">&quot;.TRACK&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;.ROLE&quot;</span>: <span class="hljs-string">&quot;Author&quot;</span>,<br>    <span class="hljs-string">&quot;.AspNetCore.Cookies&quot;</span>: <span class="hljs-string">&quot;CfDJ8JC1yWmjADxLvSP8DVdQ7PM9h9aXhei2M9X2n1gyKZDAzln5XwsqmKIfwA7qkbms31Y_5wMn76scpSspYkqF3VYwSt7u5lNTN21OIC97gNoumKnQMF1fI1-xerQAvNLX29vtm69sC-a0JdmHODOWNkq6L7FvjwH3ABskXLX09Y9VBLsVGuliIZhKXo0nuTkQUHDF4wqhxbuS6X3YlVnGv5DEcDDzes5lQzjWnfPXilfObgRwz1fCXZIstCbtNdZNutC7m2OfJtYP0GdssaJXQLxONo5IZjFoiVae-90jdRR-&quot;</span><br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json, text/plain, */*&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;en-US,en;q=0.9&quot;</span>,<br>    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/IJCAI2025/Submission/Index&quot;</span>,<br>    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;https://cmt3.research.microsoft.com&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 根据环境决定是否使用代理</span><br><span class="hljs-keyword">if</span> platform.system() == <span class="hljs-string">&quot;Windows&quot;</span>:<br>    <span class="hljs-comment"># 仅在Windows下使用代理</span><br>    <span class="hljs-comment"># proxies = &#123;</span><br>    <span class="hljs-comment">#     &quot;http&quot;: &quot;http://127.0.0.1:9090&quot;,</span><br>    <span class="hljs-comment">#     &quot;https&quot;: &quot;http://127.0.0.1:7890&quot;</span><br>    <span class="hljs-comment"># &#125;</span><br>    proxies = <span class="hljs-literal">None</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># Linux或其他系统不使用代理</span><br>    proxies = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 邮件配置</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_email</span>(<span class="hljs-params">subject, body</span>):<br>    sender = <span class="hljs-string">&quot;&quot;</span>         <span class="hljs-comment">#email</span><br>    receiver = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment">#Email</span><br>    password = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 您的密码</span><br><br>    msg = MIMEMultipart()<br>    msg[<span class="hljs-string">&quot;From&quot;</span>] = sender<br>    msg[<span class="hljs-string">&quot;To&quot;</span>] = receiver<br>    msg[<span class="hljs-string">&quot;Subject&quot;</span>] = subject<br>    msg.attach(MIMEText(body, <span class="hljs-string">&quot;plain&quot;</span>))<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 注意: 对于Outlook邮箱,需要修改SMTP服务器和端口</span><br>        server = smtplib.SMTP(<span class="hljs-string">&quot;smtp.office365.com&quot;</span>, <span class="hljs-number">587</span>)<br>        server.starttls()<br>        server.login(sender, password)<br>        server.sendmail(sender, receiver, msg.as_string())<br>        server.quit()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;📧 Email sent successfully!&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ Email send failed: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 主循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> rid, url <span class="hljs-keyword">in</span> urls.items():<br>        <span class="hljs-keyword">try</span>:<br>            response = requests.get(url, headers=headers, cookies=cookies, proxies=proxies, timeout=<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>                data = response.json()<br>                <br>                <span class="hljs-comment"># 初始化该论文的日志记录(如果不存在)</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(rid) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> log_data[<span class="hljs-string">&quot;papers&quot;</span>]:<br>                    log_data[<span class="hljs-string">&quot;papers&quot;</span>][<span class="hljs-built_in">str</span>(rid)] = &#123;<br>                        <span class="hljs-string">&quot;title&quot;</span>: data.get(<span class="hljs-string">&quot;SubmissionTitle&quot;</span>, <span class="hljs-string">&quot;Unknown Title&quot;</span>),<br>                        <span class="hljs-string">&quot;score_history&quot;</span>: [],<br>                        <span class="hljs-string">&quot;last_check&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>                    &#125;<br>                <br>                <span class="hljs-keyword">for</span> question <span class="hljs-keyword">in</span> data.get(<span class="hljs-string">&quot;Questions&quot;</span>, []):<br>                    <span class="hljs-keyword">if</span> question.get(<span class="hljs-string">&quot;Order&quot;</span>) == <span class="hljs-number">7</span>:<br>                        new_value = question.get(<span class="hljs-string">&quot;Answers&quot;</span>, [&#123;&#125;])[<span class="hljs-number">0</span>].get(<span class="hljs-string">&quot;Value&quot;</span>)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;rid&#125;</span>] <span class="hljs-subst">&#123;new_value&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br>                        <br>                        <span class="hljs-comment"># 更新日志的最后检查时间</span><br>                        log_data[<span class="hljs-string">&quot;papers&quot;</span>][<span class="hljs-built_in">str</span>(rid)][<span class="hljs-string">&quot;last_check&quot;</span>] = datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>                        <br>                        <span class="hljs-keyword">if</span> rid <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> last_scores:<br>                            last_scores[rid] = new_value<br>                            <br>                            <span class="hljs-comment"># 记录初始分数</span><br>                            log_data[<span class="hljs-string">&quot;papers&quot;</span>][<span class="hljs-built_in">str</span>(rid)][<span class="hljs-string">&quot;score_history&quot;</span>].append(&#123;<br>                                <span class="hljs-string">&quot;time&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),<br>                                <span class="hljs-string">&quot;score&quot;</span>: new_value,<br>                                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;initial&quot;</span><br>                            &#125;)<br>                            <br>                        <span class="hljs-keyword">elif</span> new_value != last_scores[rid]:<br>                            <span class="hljs-comment"># 发生了变化</span><br>                            old = last_scores[rid]<br>                            last_scores[rid] = new_value  <span class="hljs-comment"># 更新缓存值</span><br>                            title = data.get(<span class="hljs-string">&quot;SubmissionTitle&quot;</span>, <span class="hljs-string">&quot;Unknown Title&quot;</span>)<br>                            <br>                            <span class="hljs-comment"># 记录分数变化</span><br>                            log_data[<span class="hljs-string">&quot;papers&quot;</span>][<span class="hljs-built_in">str</span>(rid)][<span class="hljs-string">&quot;score_history&quot;</span>].append(&#123;<br>                                <span class="hljs-string">&quot;time&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),<br>                                <span class="hljs-string">&quot;score&quot;</span>: new_value,<br>                                <span class="hljs-string">&quot;previous_score&quot;</span>: old,<br>                                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;change&quot;</span><br>                            &#125;)<br>                            <br>                            msg = (<br>                                <span class="hljs-string">f&quot;🔔 Score Changed!\n\n&quot;</span><br>                                <span class="hljs-string">f&quot;Paper ID: <span class="hljs-subst">&#123;rid&#125;</span>\n&quot;</span><br>                                <span class="hljs-string">f&quot;Title: <span class="hljs-subst">&#123;title&#125;</span>\n&quot;</span><br>                                <span class="hljs-string">f&quot;Old Score: <span class="hljs-subst">&#123;old&#125;</span>\n&quot;</span><br>                                <span class="hljs-string">f&quot;New Score: <span class="hljs-subst">&#123;new_value&#125;</span>\n&quot;</span><br>                                <span class="hljs-string">f&quot;Link: <span class="hljs-subst">&#123;url&#125;</span>&quot;</span><br>                            )<br>                            <span class="hljs-built_in">print</span>(msg)<br>                            send_email(<span class="hljs-string">&quot;IJCAI2025 - Review Score Changed&quot;</span>, msg)<br>                        <span class="hljs-keyword">else</span>:<br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot; - No change&quot;</span>)<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                error_msg = <span class="hljs-string">f&quot;Failed to fetch <span class="hljs-subst">&#123;rid&#125;</span>, Status code: <span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span><br>                <span class="hljs-built_in">print</span>(error_msg)<br>                <br>                <span class="hljs-comment"># 记录错误</span><br>                log_data[<span class="hljs-string">&quot;errors&quot;</span>].append(&#123;<br>                    <span class="hljs-string">&quot;time&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),<br>                    <span class="hljs-string">&quot;paper_id&quot;</span>: rid,<br>                    <span class="hljs-string">&quot;error&quot;</span>: error_msg<br>                &#125;)<br>                <br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            error_msg = <span class="hljs-string">f&quot;[Error] <span class="hljs-subst">&#123;rid&#125;</span> -&gt; <span class="hljs-subst">&#123;e&#125;</span>&quot;</span><br>            <span class="hljs-built_in">print</span>(error_msg)<br>            <br>            <span class="hljs-comment"># 记录错误</span><br>            log_data[<span class="hljs-string">&quot;errors&quot;</span>].append(&#123;<br>                <span class="hljs-string">&quot;time&quot;</span>: datetime.now().strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>),<br>                <span class="hljs-string">&quot;paper_id&quot;</span>: rid,<br>                <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-built_in">str</span>(e)<br>            &#125;)<br>        <br>        <span class="hljs-comment"># 每次检查后更新日志文件</span><br>        update_log()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[<span class="hljs-subst">&#123;datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)&#125;</span>] 等待下一次检查...\n&quot;</span>)<br>    <span class="hljs-comment"># 每 100 秒检查一次</span><br>    time.sleep(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></details><h2 id="🔍-如何查看-Meta-review"><a href="#🔍-如何查看-Meta-review" class="headerlink" title="🔍 如何查看 Meta-review"></a>🔍 如何查看 Meta-review</h2><p><strong>CMT 在 UI 上并不会第一时间公开 Meta-review，</strong> 但通过接口我们是可以提前看到的。</p><h3 id="🚀-爆破方法"><a href="#🚀-爆破方法" class="headerlink" title="🚀 爆破方法"></a>🚀 爆破方法</h3><ol><li><p>登录 CMT 后复制 Cookie。</p></li><li><p>使用以下脚本暴力访问 MetaReviewViews 接口：</p><ul><li>成功响应的 ID 即为你投稿的 Meta-review ID。</li></ul></li><li><p>用浏览器打开：</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cmt3.research.microsoft.com<span class="hljs-regexp">/api/</span>odata<span class="hljs-regexp">/IJCAI2025/</span>MetaReviewViews/xxx<br></code></pre></td></tr></table></figure><p>即可获取内容。</p><h3 id="🔐-爆破脚本"><a href="#🔐-爆破脚本" class="headerlink" title="🔐 爆破脚本"></a>🔐 爆破脚本</h3><details><summary>点击查看爆破脚本源码</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br>cookies = &#123;<br>    <span class="hljs-comment"># &quot;MC1&quot;: &quot;GUID=44928b063b3947518a67995891bf0044&amp;HASH=4492&amp;LV=202504&amp;V=4&amp;LU=1744614339104&quot;,</span><br>    <span class="hljs-string">&quot;.TRACK&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;.ROLE&quot;</span>: <span class="hljs-string">&quot;Author&quot;</span>,<br>    <span class="hljs-string">&quot;.AspNetCore.Cookies&quot;</span>: <span class="hljs-string">&quot;CfDJ8JC1yWmjADxLvSP8DVdQ7PPSPO1yb6CuSpzMHAMB4uGge4NbgHYHw6lXfTJqiOH-6W4DmeRjtQRwQisMbTQiO7Zby5UW9Bd8xkV8zCOP1xSPjNu3Up2F7RbYaBfx2LmuQ4lPttZJ8wGNTZ7Ei4WjEwTC6G7my3y16Pl93196VhECARZXr2AvW5ptDj1fI7bDkSLHAXzLfX1fj8tNxJ-IMuQk4jqJRcbLGhCVBFKpD3pxhrI-h2edsJJusMcuDBSnI5R6EttkeRGI6X_7-DmZEm63uvQ2eT1OfxbmzKSyaHaS&quot;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_id</span>(<span class="hljs-params">session, base_url, <span class="hljs-built_in">id</span></span>):<br>    url = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;base_url&#125;</span>/<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        response = session.get(url)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;error&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;✅ ID <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> is valid: <span class="hljs-subst">&#123;response.text[:<span class="hljs-number">200</span>]&#125;</span>...&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">id</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;❌ ID <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span> failed: <span class="hljs-subst">&#123;response.status_code&#125;</span> - <span class="hljs-subst">&#123;response.text[:<span class="hljs-number">500</span>]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;⚠️ Error checking ID <span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_valid_ids</span>(<span class="hljs-params">base_url, start_id, end_id</span>):<br>    valid_ids = []<br>    session = requests.Session()<br>    session.cookies.update(cookies)<br>    <br>    left = start_id<br>    right = end_id<br>    <br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> executor:<br>        <span class="hljs-keyword">while</span> left &lt;= right:<br>            <span class="hljs-comment"># 同时检查左右两端</span><br>            future_left = executor.submit(check_id, session, base_url, left)<br>            future_right = executor.submit(check_id, session, base_url, right) <span class="hljs-keyword">if</span> left != right <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>            <br>            <span class="hljs-comment"># 获取结果</span><br>            result_left = future_left.result()<br>            <span class="hljs-keyword">if</span> result_left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                valid_ids.append(result_left)<br>                <br>            <span class="hljs-keyword">if</span> future_right:<br>                result_right = future_right.result()<br>                <span class="hljs-keyword">if</span> result_right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    valid_ids.append(result_right)<br>            <br>            left += <span class="hljs-number">1</span><br>            right -= <span class="hljs-number">1</span><br>            <br>            <span class="hljs-comment"># 如果找到有效ID，可以提前结束</span><br>            <span class="hljs-keyword">if</span> valid_ids:<br>                <span class="hljs-comment"># break</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found valid IDs: <span class="hljs-subst">&#123;valid_ids&#125;</span>&quot;</span>)<br>                <span class="hljs-comment"># 继续检查剩余的ID</span><br>                <br>    <span class="hljs-keyword">return</span> valid_ids<br><br>base_url = <span class="hljs-string">&quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/MetaReviewViews&quot;</span><br><span class="hljs-comment"># base_url = &quot;https://cmt3.research.microsoft.com/api/odata/IJCAI2025/SeniorMetaReviewerNoteViews&quot;</span><br>start_id, end_id = <span class="hljs-number">0</span>, <span class="hljs-number">10000</span><br>valid_ids = check_valid_ids(base_url, start_id, end_id)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nValid IDs:&quot;</span>, valid_ids)<br></code></pre></td></tr></table></figure></details><hr><h2 id="🕵️‍♂️-提前获取结果"><a href="#🕵️‍♂️-提前获取结果" class="headerlink" title="🕵️‍♂️ 提前获取结果"></a>🕵️‍♂️ 提前获取结果</h2><p>除了评分和 Meta-review，有时我们还想<strong>尽早知道论文的最终状态</strong>。虽然 CMT 没有在 UI 上直接显示，但我们依然可以通过接口拿到 SubmissionStatus。</p><h3 id="📌-操作步骤"><a href="#📌-操作步骤" class="headerlink" title="📌 操作步骤"></a>📌 操作步骤</h3><ol><li>访问以下链接，获取你论文的 Submission ID 对应的 <code>StatusId</code>：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>[https:<span class="hljs-regexp">//</span>cmt3.research.microsoft.com<span class="hljs-regexp">/api/</span>odata<span class="hljs-regexp">/IJCAI2025/</span>Submissions<span class="hljs-regexp">/你的论文编号](https:/</span><span class="hljs-regexp">/cmt3.research.microsoft.com/</span>api<span class="hljs-regexp">/odata/</span>IJCAI2025<span class="hljs-regexp">/Submissions/</span>你的论文编号)<br><br></code></pre></td></tr></table></figure><ol start="2"><li>然后用该 <code>StatusId</code> 去下面这个接口对应结果：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>[https:<span class="hljs-regexp">//</span>cmt3.research.microsoft.com<span class="hljs-regexp">/api/</span>odata<span class="hljs-regexp">/IJCAI2025/</span>SubmissionStatuses](https:<span class="hljs-regexp">//</span>cmt3.research.microsoft.com<span class="hljs-regexp">/api/</span>odata<span class="hljs-regexp">/IJCAI2025/</span>SubmissionStatuses)<br><br></code></pre></td></tr></table></figure><h2 id="🎯-总结"><a href="#🎯-总结" class="headerlink" title="🎯 总结"></a>🎯 总结</h2><p>这一年的 IJCAI 投稿过程中，我学到了很多，也踩了不少坑。总结几点经验分享如下：</p><ul><li><strong>接口随时可能改动</strong>：今年的接口结构相比去年有改动，建议务必注意抓包调试。</li><li><strong>邮箱提醒是刚需</strong>：有些评分变化是在凌晨发生的，邮箱提醒能第一时间知道。</li><li><strong>Meta-review 不一定有用</strong>：提前看到 Meta-review 虽然能提前准备 rebuttal 或预期结果，但最终结果未必一致。</li></ul><p>如果你也准备投稿 IJCAI，希望这些工具和经验能帮到你。欢迎交流分享！</p><h1 id="提前获取结果"><a href="#提前获取结果" class="headerlink" title="提前获取结果"></a>提前获取结果</h1><p>通过如下链接获取对应的status id<br><a href="https://cmt3.research.microsoft.com/api/odata/IJCAI2025/Submissions/%E8%AE%BA%E6%96%87%E7%BC%96%E5%8F%B7">https://cmt3.research.microsoft.com/api/odata/IJCAI2025/Submissions/论文编号</a></p><p>对照如下链接中的状态，即可获取结果：<br><a href="https://cmt3.research.microsoft.com/api/odata/IJCAI2025/SubmissionStatuses">https://cmt3.research.microsoft.com/api/odata/IJCAI2025/SubmissionStatuses</a></p>]]></content>
    
    
    <categories>
      
      <category>论文投稿</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IJCAI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tmux终端详解!</title>
    <link href="/2025/04/22/tmux%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/04/22/tmux%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常科研和开发中，我们经常需要在远程服务器上运行长时间的任务，例如有时候进行编译，或者下载大文件需要比较长的时间，一般情况下是下班之后直接运行希望第二天早上过来运行完成，这样就不用耽误工作时间。但是网络有时候不稳定，可能在半夜会出现连接断掉的情况，一旦连接断掉，我们所执行的程序也就中断，我们当然可以写一个脚本后台运行，但是还是不方便。</p><p>一个稳定可靠、便捷高效的终端复用工具显得尤为重要。么有没有一种工具可以解决这样的问题呢。这就是我们这里要提到的tmux了。其实类似tmux的工具还有很多。例如gnu screen等。tmux刚好可以解决我们描述的问题，当我们在tmux中工作的时候，即使关掉SecureCRT的连接窗口，再次连接，进入tmux的会话我们之前的工作仍然在继续。本文将系统介绍 <code>tmux</code> 的作用及其与 <code>nohup</code> 的区别，附上常用命令清单，帮助你更高效地管理远程任务。</p><hr><h2 id="1-什么是-tmux？"><a href="#1-什么是-tmux？" class="headerlink" title="1. 什么是 tmux？"></a>1. 什么是 tmux？</h2><p><code>tmux</code>（terminal multiplexer）是一个终端复用器，它允许用户在同一个 SSH 会话中：</p><ul><li>创建多个终端窗口和分屏  </li><li>在后台运行任务  </li><li>保持会话持续不断，即使断开网络也能重新连接</li></ul><p>简而言之，<code>tmux</code> 是一个让你 <strong>“一次登录，永久在线”</strong> 的工具。</p><hr><h2 id="2-tmux-与-nohup-的区别"><a href="#2-tmux-与-nohup-的区别" class="headerlink" title="2. tmux 与 nohup 的区别"></a>2. tmux 与 nohup 的区别</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>tmux</strong></th><th><strong>nohup</strong></th></tr></thead><tbody><tr><td><strong>会话持久性</strong></td><td>是，支持会话管理</td><td>是，但需配合 <code>&amp;</code> 手动后台执行</td></tr><tr><td><strong>多窗口&#x2F;分屏</strong></td><td>支持，类似 IDE 分屏体验</td><td>不支持</td></tr><tr><td><strong>实时交互</strong></td><td>支持，任务输出可交互查看和调试</td><td>不支持，仅将输出写入文件</td></tr><tr><td><strong>查看历史输出</strong></td><td>支持滚动查看历史</td><td>依赖输出文件（<code>nohup.out</code>）</td></tr><tr><td><strong>使用复杂度</strong></td><td>中等，命令较多但逻辑清晰</td><td>低，语法简单</td></tr><tr><td><strong>推荐场景</strong></td><td>多任务并行、需要交互或调试的长时间任务</td><td>简单命令行程序、无需交互的脚本任务</td></tr></tbody></table><p>简言之，<code>nohup</code> 更像是 “fire-and-forget”，而 <code>tmux</code> 是一个功能完整的会话管理器，更像是 “fire-and-control”。</p><p>（“fire-and-forget” 是一个来自军事领域的术语，原意是指导弹发射后无需继续控制，自动追踪目标完成任务。引申到计算机和编程语境里，它的意思是：“一旦启动（fire），就不管它了（forget）。”）</p><hr><h2 id="3-如何在服务器使用-tmux？"><a href="#3-如何在服务器使用-tmux？" class="headerlink" title="3. 如何在服务器使用 tmux？"></a>3. 如何在服务器使用 tmux？</h2><h3 id="安装（如未安装）"><a href="#安装（如未安装）" class="headerlink" title="安装（如未安装）"></a>安装（如未安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu / Debian</span><br><span class="hljs-built_in">sudo</span> apt install tmux<br><br><span class="hljs-comment"># CentOS / RHEL</span><br><span class="hljs-built_in">sudo</span> yum install tmux<br></code></pre></td></tr></table></figure><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux new -s mysession<br></code></pre></td></tr></table></figure><p>这将创建一个名为 <code>mysession</code> 的新会话。</p><h3 id="分离会话（任务继续运行）"><a href="#分离会话（任务继续运行）" class="headerlink" title="分离会话（任务继续运行）"></a>分离会话（任务继续运行）</h3><p>按下键盘：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Ctrl</span> + <span class="hljs-keyword">b</span> 然后按 d<br></code></pre></td></tr></table></figure><p>这将 “detach” 当前 tmux 会话，任务仍继续运行。</p><h3 id="查看当前会话"><a href="#查看当前会话" class="headerlink" title="查看当前会话"></a>查看当前会话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="恢复会话"><a href="#恢复会话" class="headerlink" title="恢复会话"></a>恢复会话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tmux attach -t mysession<br></code></pre></td></tr></table></figure><p>如果你忘了会话名，可以先 <code>tmux ls</code> 查看。</p><h3 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span><br></code></pre></td></tr></table></figure><p>或在 tmux 中直接关闭最后一个终端窗口。</p><hr><h2 id="4-tmux-常用命令汇总表"><a href="#4-tmux-常用命令汇总表" class="headerlink" title="4. tmux 常用命令汇总表"></a>4. tmux 常用命令汇总表</h2><p>下面是一个 <strong>按层级结构整理的 tmux 快捷键和命令表</strong>，清晰地区分了 <code>会话（Session）</code>、<code>窗口（Window）</code>、<code>窗格（Pane）</code> 三个层级的常用操作，重复项合并优化，便于查阅和记忆。</p><hr><h3 id="🧱-层级结构速览"><a href="#🧱-层级结构速览" class="headerlink" title="🧱 层级结构速览"></a>🧱 层级结构速览</h3><pre><code class=" mermaid">graph TD  Session[&quot;🧭 Session（会话）&quot;]  Window[&quot;🪟 Window（窗口）&quot;]  Pane[&quot;📑 Pane（窗格）&quot;]  Session --&gt; Window  Window --&gt; Pane</code></pre><h3 id="🧭-会话（Session）操作"><a href="#🧭-会话（Session）操作" class="headerlink" title="🧭 会话（Session）操作"></a>🧭 会话（Session）操作</h3><table><thead><tr><th>操作</th><th>命令 &#x2F; 快捷键</th></tr></thead><tbody><tr><td>创建新会话</td><td><code>tmux new -s &lt;name&gt;</code> 或 <code>tmux</code>（无名会话）</td></tr><tr><td>断开当前会话</td><td><code>Ctrl + b</code> 然后 <code>d</code>（detach）</td></tr><tr><td>查看会话列表</td><td><code>tmux ls</code></td></tr><tr><td>恢复指定会话</td><td><code>tmux attach -t &lt;name&gt;</code></td></tr><tr><td>重命名会话</td><td><code>tmux rename-session -t old new</code></td></tr><tr><td>关闭当前会话</td><td>所有窗口关闭后自动退出，或使用 <code>tmux kill-session -t &lt;name&gt;</code></td></tr></tbody></table><hr><h3 id="🪟-窗口（Window）操作"><a href="#🪟-窗口（Window）操作" class="headerlink" title="🪟 窗口（Window）操作"></a>🪟 窗口（Window）操作</h3><table><thead><tr><th>操作</th><th>命令 &#x2F; 快捷键</th></tr></thead><tbody><tr><td>创建新窗口</td><td><code>Ctrl + b</code> 然后 <code>c</code></td></tr><tr><td>切换窗口</td><td><code>Ctrl + b</code> 然后 数字键 &#x2F; <code>n</code>（下一个） &#x2F; <code>p</code>（上一个）</td></tr><tr><td>查看窗口列表</td><td><code>Ctrl + b</code> 然后 <code>w</code></td></tr><tr><td>重命名当前窗口</td><td><code>Ctrl + b</code> 然后 <code>,</code></td></tr><tr><td>关闭当前窗口</td><td>关闭该窗口中所有 pane（<code>exit</code> or <code>Ctrl + d</code>）</td></tr><tr><td>强制关闭窗口</td><td><code>tmux kill-window -t &lt;window-index&gt;</code></td></tr></tbody></table><hr><h3 id="📑-窗格（Pane）操作"><a href="#📑-窗格（Pane）操作" class="headerlink" title="📑 窗格（Pane）操作"></a>📑 窗格（Pane）操作</h3><table><thead><tr><th>操作</th><th>命令 &#x2F; 快捷键</th></tr></thead><tbody><tr><td>垂直分割窗格</td><td><code>Ctrl + b</code> 然后 <code>&quot;</code></td></tr><tr><td>水平分割窗格</td><td><code>Ctrl + b</code> 然后 <code>%</code></td></tr><tr><td>在窗格间切换</td><td><code>Ctrl + b</code> 然后方向键</td></tr><tr><td>调整窗格大小</td><td><code>Ctrl + b</code> 然后按住 <code>Ctrl</code> + 方向键</td></tr><tr><td>关闭当前窗格</td><td>在 pane 中运行 <code>exit</code> 或 <code>Ctrl + d</code></td></tr></tbody></table><hr><h3 id="🧰-通用增强功能"><a href="#🧰-通用增强功能" class="headerlink" title="🧰 通用增强功能"></a>🧰 通用增强功能</h3><table><thead><tr><th>操作</th><th>命令 &#x2F; 快捷键</th></tr></thead><tbody><tr><td>进入复制&#x2F;滚动模式</td><td><code>Ctrl + b</code> 然后 <code>[</code></td></tr><tr><td>滚动查看历史输出</td><td>在复制模式中使用方向键 &#x2F; PageUp&#x2F;PageDown</td></tr><tr><td>复制选中内容</td><td>在复制模式中 <code>Space</code> 开始选择，<code>Enter</code> 复制</td></tr><tr><td>粘贴</td><td><code>Ctrl + b</code> 然后 <code>]</code></td></tr></tbody></table><hr><h2 id="5-tmux-层级结构图"><a href="#5-tmux-层级结构图" class="headerlink" title="5. tmux 层级结构图"></a>5. tmux 层级结构图</h2><hr><h3 id="tmux-层级结构图：Session-Window-Pane"><a href="#tmux-层级结构图：Session-Window-Pane" class="headerlink" title="tmux 层级结构图：Session &#x2F; Window &#x2F; Pane"></a>tmux 层级结构图：Session &#x2F; Window &#x2F; Pane</h3><p>在 tmux 中，结构可以理解为 3 层嵌套关系：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+--------------------+<br>|<span class="hljs-string">  Session: mysession</span>|<br>|<span class="hljs-string">                    </span>|<br>|<span class="hljs-string">  +--------------+  </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> Window 0     </span>|<span class="hljs-string">&lt;-----------------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">  </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                              </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> +----+ +----+</span>|<span class="hljs-string">   Ctrl + b + % 或 &quot; 分割 pane </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">pane</span>|<span class="hljs-string"> </span>|<span class="hljs-string">pane</span>||<span class="hljs-string">                              </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> +----+ +----+</span>|<span class="hljs-string">                              </span>|<br>|<span class="hljs-string">  +--------------+                              </span>|<br>|<span class="hljs-string">                                                 </span>|<br>|<span class="hljs-string">  +--------------+                               </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> Window 1     </span>|<span class="hljs-string">&lt;---- Ctrl + b + c 新建窗口    </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string">              </span>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">  single  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> </span>|<span class="hljs-string">   pane   </span>|<span class="hljs-string"> </span>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  </span>|<span class="hljs-string"> +----------+ </span>|<span class="hljs-string">                               </span>|<br>|<span class="hljs-string">  +--------------+                               </span>|<br>+--------------------+<br></code></pre></td></tr></table></figure><hr><h3 id="📌-各个组件定义"><a href="#📌-各个组件定义" class="headerlink" title="📌 各个组件定义"></a>📌 各个组件定义</h3><h4 id="1-Session（会话）"><a href="#1-Session（会话）" class="headerlink" title="1. Session（会话）"></a>1. Session（会话）</h4><ul><li>tmux 的顶层单位；</li><li>一个会话可以包含多个窗口；</li><li>可以通过 <code>tmux new -s name</code> 创建；</li><li>可断开（detach）、恢复（attach）、杀掉（kill）；</li><li>一般一个项目、一个任务建议一个 session，便于管理。</li></ul><h4 id="2-Window（窗口）"><a href="#2-Window（窗口）" class="headerlink" title="2. Window（窗口）"></a>2. Window（窗口）</h4><ul><li>类似于一个“标签页”；</li><li>一个 session 中可以有多个 window；</li><li>每个 window 中可以包含一个或多个 pane；</li><li>使用 <code>Ctrl + b</code> 然后 <code>c</code> 新建，<code>n</code>&#x2F;<code>p</code> 或数字键切换。</li></ul><h4 id="3-Pane（窗格）"><a href="#3-Pane（窗格）" class="headerlink" title="3. Pane（窗格）"></a>3. Pane（窗格）</h4><ul><li>是 window 中的分屏区域；</li><li>用来实际执行命令；</li><li>支持水平 <code>%</code> 或垂直 <code>&quot;</code> 分割；</li><li>使用方向键、<code>Ctrl + b + o</code> 切换，<code>Ctrl + d</code> 关闭。</li></ul><hr><h3 id="✅-层级总结"><a href="#✅-层级总结" class="headerlink" title="✅ 层级总结"></a>✅ 层级总结</h3><table><thead><tr><th>级别</th><th>包含关系</th><th>示例命令</th></tr></thead><tbody><tr><td>Session</td><td>包含多个 Window</td><td><code>tmux new -s &lt;name&gt;</code></td></tr><tr><td>Window</td><td>包含多个 Pane</td><td><code>Ctrl + b</code> 然后 <code>c</code></td></tr><tr><td>Pane</td><td>实际终端操作区域</td><td><code>Ctrl + b</code> 然后 <code>%</code> 或 <code>&quot;</code></td></tr></tbody></table><hr><p>💡 推荐习惯：</p><ul><li>给 session 起明确名字（如 <code>projectA</code>）；</li><li>用 window 区分不同任务（如训练&#x2F;调试&#x2F;测试）；</li><li>用 pane 分屏处理多个相关命令（如 htop系统资源占用情况、tail查看日志输出、运行命令等）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">htop <span class="hljs-comment"># 查看系统资源占用情况</span><br><br><span class="hljs-built_in">tail</span> app.log <span class="hljs-comment"># 查看日志默认最后10行</span><br><br><span class="hljs-built_in">tail</span> -f app.log <span class="hljs-comment"># -f 选项表示持续输出新日志</span><br></code></pre></td></tr></table></figure><hr><h2 id="✨-总结"><a href="#✨-总结" class="headerlink" title="✨ 总结"></a>✨ 总结</h2><p><code>tmux</code> 是远程开发过程中不可或缺的工具之一，它相比 <code>nohup</code> 拥有更丰富的交互性和可控性，尤其适合科研、数据挖掘等需长时间训练和调试的场景。</p>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时空预测介绍</title>
    <link href="/2025/04/21/%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2025/04/21/%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="时空预测任务理解与思考"><a href="#时空预测任务理解与思考" class="headerlink" title="时空预测任务理解与思考"></a>时空预测任务理解与思考</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近看了中科院在 TKDE 上发表的一篇关于时空数据挖掘的综述论文：[<strong>Exploring Progress in Multivariate Time Series Forecasting: Comprehensive Benchmarking and Heterogeneity Analysis</strong>]。这篇文章让我对时空预测任务有了更深的理解。本篇博客主要是对这篇综述的总结和一些个人的思考。</p><hr><h2 id="二、什么是-MTS？"><a href="#二、什么是-MTS？" class="headerlink" title="二、什么是 MTS？"></a>二、什么是 MTS？</h2><p><strong>MTS</strong>（Multivariate Time Series）即<strong>多变量时间序列</strong>，指由多个相互关联的变量组成的、有时间顺序的数据集合。它广泛应用于金融、气象、交通、医疗等领域。</p><p>在 MTS 预测中，有两个核心任务：</p><ul><li><strong>LTSF（Long-Term Series Forecasting）</strong>：关注长期预测，建模长期依赖；</li><li><strong>STF（Spatio-Temporal Forecasting）</strong>：关注时空建模，通过捕捉空间相关性提升预测性能。</li></ul><h3 id="LTSF-模型特点："><a href="#LTSF-模型特点：" class="headerlink" title="LTSF 模型特点："></a>LTSF 模型特点：</h3><ul><li>序列层级相关建模（Series-level correlations）</li><li>频率域建模（Frequency-based methods）</li><li>Patch-based Transformer 等模型</li></ul><h3 id="STF-模型特点："><a href="#STF-模型特点：" class="headerlink" title="STF 模型特点："></a>STF 模型特点：</h3><ul><li>结合卷积网络、图卷积网络与序列模型，形成时空神经网络（如 STGNN、TCN）</li></ul><h3 id="常用指标："><a href="#常用指标：" class="headerlink" title="常用指标："></a>常用指标：</h3><ul><li><strong>绝对误差指标</strong>：MAE、MSE、RMSE</li><li><strong>相对误差指标</strong>：MAPE、WAPE、SMAPE</li></ul><hr><h2 id="三、训练与优化设置"><a href="#三、训练与优化设置" class="headerlink" title="三、训练与优化设置"></a>三、训练与优化设置</h2><h3 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h3><ul><li>常用归一化方法：<ul><li>Min-Max 归一化</li><li>Z-score 标准化（多数研究采用）</li></ul></li></ul><h3 id="训练技巧："><a href="#训练技巧：" class="headerlink" title="训练技巧："></a>训练技巧：</h3><ul><li><strong>Masked MAE</strong> 通常比普通 MAE 更有效；</li><li>可选技巧包括：<ul><li>梯度裁剪（Gradient Clipping）</li><li>课程学习（Curriculum Learning）</li><li>……</li></ul></li></ul><hr><h2 id="四、不同数据集特点与模型选择建议"><a href="#四、不同数据集特点与模型选择建议" class="headerlink" title="四、不同数据集特点与模型选择建议"></a>四、不同数据集特点与模型选择建议</h2><p>高级模型通常具备较强的拟合能力与归纳偏置，适用于特定模式；而基础模型（如线性模型）泛化能力更强，适用于模式不明显的场景。</p><h3 id="1-时间建模与模型选择"><a href="#1-时间建模与模型选择" class="headerlink" title="1. 时间建模与模型选择"></a>1. 时间建模与模型选择</h3><p>可将数据集按时间模式划分为三类：</p><table><thead><tr><th>时间模式类型</th><th>建议模型类型</th><th>原因说明</th></tr></thead><tbody><tr><td>模式稳定（stable）</td><td>高级神经网络</td><td>可学习复杂的周期性与模式</td></tr><tr><td>分布漂移明显</td><td>基础神经网络</td><td>高级模型容易过拟合</td></tr><tr><td>无明确模式</td><td>基础神经网络</td><td>拟合能力强反而容易学到虚假特征</td></tr></tbody></table><blockquote><p>✅ <strong>总结：</strong> 模式稳定数据适合高级模型；模式漂移或不明确时，基础模型可能更稳健。</p></blockquote><hr><h3 id="2-空间建模与模型选择"><a href="#2-空间建模与模型选择" class="headerlink" title="2. 空间建模与模型选择"></a>2. 空间建模与模型选择</h3><p>将数据集按空间特性划分为两类：</p><ul><li><strong>存在空间样本不可区分性</strong>（Significant Spatial Sample Indistinguishability）</li><li><strong>不存在空间样本不可区分性</strong></li></ul><p><strong>空间不可区分性</strong>是指：在相同时间点，不同位置的历史观测数据非常相似，但其未来演化却存在显著差异。这种异质性使得简单模型（如 MLP、RNN）难以区分不同空间位置的预测。</p><blockquote><p>与时间建模不同，<strong>空间依赖更难建模与评估</strong>，图卷积网络（GCNs）虽常用于空间建模，但对空间异质性的理解仍有待深入。</p></blockquote><h4 id="指标推荐："><a href="#指标推荐：" class="headerlink" title="指标推荐："></a>指标推荐：</h4><p>综述中推荐使用 <strong>r1 和 r2</strong> 两个指标量化空间不可区分性（可参考 STID、ST-Norm 的设计思路）。</p><h4 id="建议总结："><a href="#建议总结：" class="headerlink" title="建议总结："></a>建议总结：</h4><table><thead><tr><th>空间特性类型</th><th>建议做法</th></tr></thead><tbody><tr><td>不存在显著空间不可区分性</td><td>无需刻意建模空间依赖</td></tr><tr><td>存在显著空间不可区分性</td><td>需要显式建模异质性，可显著提升性能</td></tr></tbody></table><hr><h2 id="五、个人思考"><a href="#五、个人思考" class="headerlink" title="五、个人思考"></a>五、个人思考</h2><p>这篇综述提供了系统的分析框架来理解不同模型在不同数据分布下的表现，对于今后选择模型、设计实验具有很强的指导意义。</p><p>尤其是对<strong>空间不可区分性</strong>的定义与量化方式，弥补了当前研究中对于“空间依赖”缺乏定量分析的不足，也让我在今后的研究中会更加重视数据本身的异质性特征。</p><hr><p><em>写于清华校园某个夜晚 🌙</em></p>]]></content>
    
    
    <categories>
      
      <category>时空数据挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时空数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/04/21/Diffusion%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2025/04/21/Diffusion%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Diffusion 学习路径指南!</title>
    <link href="/2025/04/16/Diffusion%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/"/>
    <url>/2025/04/16/Diffusion%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#diffusion-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%A2%B3%E7%90%86">Diffusion 学习路径梳理</a><ul><li><a href="#1-diffusion-models-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E6%8E%A8%E8%8D%90">1. Diffusion Models 入门教程推荐</a><ul><li><a href="#-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">🧑‍🏫 基础入门教程</a></li><li><a href="#-%E5%BA%94%E7%94%A8%E4%B8%8E%E7%BB%BC%E8%BF%B0">📚 应用与综述</a></li></ul></li><li><a href="#2-diffusion-models-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%BF%85%E8%AF%BB">2. Diffusion Models 基础入门必读</a><ul><li><a href="#-%E6%A0%B8%E5%BF%83%E8%AE%BA%E6%96%87">📌 核心论文</a></li><li><a href="#%EF%B8%8F-%E9%87%87%E6%A0%B7%E4%B8%8E%E5%8A%A0%E9%80%9F">⚙️ 采样与加速</a></li><li><a href="#-%E6%BD%9C%E7%A9%BA%E9%97%B4%E5%BB%BA%E6%A8%A1">🧠 潜空间建模</a></li></ul></li><li><a href="#3-diffusion-models-%E8%BF%9B%E9%98%B6%E9%98%85%E8%AF%BB">3. Diffusion Models 进阶阅读</a><ul><li><a href="#-guidance%E5%BC%95%E5%AF%BC%E6%9C%BA%E5%88%B6">🔍 Guidance（引导机制）</a></li><li><a href="#-flow-matching-%E6%96%B9%E6%B3%95">🔁 Flow Matching 方法</a></li><li><a href="#-rectified-flow-%E5%8F%8A%E6%94%B9%E8%BF%9B">🚀 Rectified Flow 及改进</a></li><li><a href="#-schr%C3%B6dinger-bridge-%E6%96%B9%E6%B3%95">🔗 Schrödinger Bridge 方法</a></li><li><a href="#-consistency-%E6%A8%A1%E5%9E%8B">🔄 Consistency 模型</a></li></ul></li></ul></li></ul><h1 id="Diffusion-学习路径梳理"><a href="#Diffusion-学习路径梳理" class="headerlink" title="Diffusion 学习路径梳理"></a>Diffusion 学习路径梳理</h1><p>本博客旨在系统梳理 Diffusion 模型的学习路径，构建清晰的学习框架，便于本科生和研究生初学者快速入门并逐步进阶。</p><hr><!-- toc --><h2 id="1-Diffusion-Models-入门教程推荐"><a href="#1-Diffusion-Models-入门教程推荐" class="headerlink" title="1. Diffusion Models 入门教程推荐"></a>1. Diffusion Models 入门教程推荐</h2><p>适合初学者阅读，内容通俗易懂、涵盖基础与前沿：</p><h3 id="🧑‍🏫-基础入门教程"><a href="#🧑‍🏫-基础入门教程" class="headerlink" title="🧑‍🏫 基础入门教程"></a>🧑‍🏫 基础入门教程</h3><ul><li><p><a href="https://arxiv.org/abs/2403.18103"><strong>Tutorial on Diffusion Models for Imaging and Vision</strong></a><br>对 Diffusion 各类公式进行了系统汇总，并分析了与 VAE 等其他生成模型的联系。</p></li><li><p><a href="https://arxiv.org/abs/2208.11970"><strong>Understanding Diffusion Models: A Unified Perspective</strong></a><br>从 deterministic sampler 角度出发，进一步引入 flow matching，兼具基础与前沿性。</p></li><li><p><a href="https://arxiv.org/abs/2406.08929"><strong>Step-by-Step Diffusion: An Elementary Tutorial</strong></a><br>逐步拆解 diffusion 原理，深入浅出，适合快速构建基本认知。</p></li></ul><h3 id="📚-应用与综述"><a href="#📚-应用与综述" class="headerlink" title="📚 应用与综述"></a>📚 应用与综述</h3><ul><li><a href="https://arxiv.org/abs/2209.00796"><strong>Diffusion Models: A Comprehensive Survey of Methods and Applications</strong></a><br>对 Diffusion 各种应用方向进行了全面总结，适合查阅使用场景。</li></ul><hr><h2 id="2-Diffusion-Models-基础入门必读"><a href="#2-Diffusion-Models-基础入门必读" class="headerlink" title="2. Diffusion Models 基础入门必读"></a>2. Diffusion Models 基础入门必读</h2><h3 id="📌-核心论文"><a href="#📌-核心论文" class="headerlink" title="📌 核心论文"></a>📌 核心论文</h3><ul><li><p><strong>DDPM</strong>: <a href="https://arxiv.org/abs/2006.11239">Denoising Diffusion Probabilistic Models</a><br>虽非最早提出 Diffusion 思路，但首次实现并获得成功，意义重大。</p></li><li><p><strong>NCSN</strong>: <a href="https://arxiv.org/abs/1907.05600">Generative Modeling by Estimating Gradients of the Data Distribution</a><br>使用 score matching 来估计数据分布梯度，开启了 score-based 模型的路径。</p></li><li><p><strong>Score-SDE</strong>: <a href="https://arxiv.org/abs/2011.13456">Score-Based Generative Modeling through Stochastic Differential Equations</a><br>用 SDE 统一前两类方法，为 diffusion 提供了坚实理论基础。</p></li><li><p><strong>EDM</strong>: <a href="https://arxiv.org/abs/2206.00364">Energy-Based Generative Modeling with Diffusion Processes</a><br>从 noise schedule 入手，统一现有 Diffusion 模型框架。</p></li></ul><h3 id="⚙️-采样与加速"><a href="#⚙️-采样与加速" class="headerlink" title="⚙️ 采样与加速"></a>⚙️ 采样与加速</h3><ul><li><p><strong>DDIM</strong>: <a href="https://arxiv.org/abs/2010.02502">Denoising Diffusion Implicit Models</a><br>跳步采样技术，摆脱马尔科夫链，显著提升采样速度。</p></li><li><p><strong>DPM-Solver</strong>: <a href="https://arxiv.org/abs/2206.00927">A Fast ODE Solver for Diffusion Probabilistic Models</a><br>另一种采样加速方式，基于 ODE 视角。</p></li></ul><h3 id="🧠-潜空间建模"><a href="#🧠-潜空间建模" class="headerlink" title="🧠 潜空间建模"></a>🧠 潜空间建模</h3><ul><li><strong>Latent Diffusion（LDM）</strong>:  <ul><li><a href="https://arxiv.org/abs/2106.05931">Score-based Generative Modeling in Latent Space</a><br>引入 encoder-decoder，将 Diffusion 模型迁移至 latent space。</li><li><a href="https://arxiv.org/abs/2112.10752">High-Resolution Image Synthesis with Latent Diffusion Models</a><br>即 Stable Diffusion 原始论文，进一步优化模块训练流程，提高图像质量。</li></ul></li></ul><hr><h2 id="3-Diffusion-Models-进阶阅读"><a href="#3-Diffusion-Models-进阶阅读" class="headerlink" title="3. Diffusion Models 进阶阅读"></a>3. Diffusion Models 进阶阅读</h2><h3 id="🔍-Guidance（引导机制）"><a href="#🔍-Guidance（引导机制）" class="headerlink" title="🔍 Guidance（引导机制）"></a>🔍 Guidance（引导机制）</h3><ul><li><a href="https://arxiv.org/abs/2105.05233"><strong>Diffusion Models Beat GANs on Image Synthesis</strong></a>  </li><li><a href="https://arxiv.org/abs/2207.12598"><strong>Classifier-Free Diffusion Guidance</strong></a></li></ul><h3 id="🔁-Flow-Matching-方法"><a href="#🔁-Flow-Matching-方法" class="headerlink" title="🔁 Flow Matching 方法"></a>🔁 Flow Matching 方法</h3><ul><li><a href="https://arxiv.org/abs/2210.02747"><strong>Flow Matching for Generative Modeling</strong></a></li></ul><h3 id="🚀-Rectified-Flow-及改进"><a href="#🚀-Rectified-Flow-及改进" class="headerlink" title="🚀 Rectified Flow 及改进"></a>🚀 Rectified Flow 及改进</h3><ul><li><a href="https://arxiv.org/abs/2209.03003"><strong>Flow Straight and Fast: Learning to Generate and Transfer Data with Rectified Flow</strong></a>  </li><li><a href="https://arxiv.org/abs/2405.20320"><strong>Improving the Training of Rectified Flows</strong></a></li></ul><h3 id="🔗-Schrodinger-Bridge-方法"><a href="#🔗-Schrodinger-Bridge-方法" class="headerlink" title="🔗 Schrödinger Bridge 方法"></a>🔗 Schrödinger Bridge 方法</h3><ul><li><a href="https://arxiv.org/abs/2110.11291"><strong>Likelihood Training of Schrödinger Bridge using Forward-Backward SDEs Theory</strong></a></li></ul><h3 id="🔄-Consistency-模型"><a href="#🔄-Consistency-模型" class="headerlink" title="🔄 Consistency 模型"></a>🔄 Consistency 模型</h3><ul><li><a href="https://arxiv.org/abs/2303.01469"><strong>Consistency Models</strong></a></li></ul><hr><p>如有补充推荐或建议，欢迎交流！🌱</p>]]></content>
    
    
    <categories>
      
      <category>Diffusion Models</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World, My First Blog!</title>
    <link href="/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2025/03/26/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在本科和研究生期间，我看过很多大佬的个人网站，每次浏览他们的博客时，总是非常佩服，并且一直想建立一个属于自己的网站，记录一些技术学习和生活中的点滴感悟。不过，由于工作和生活中的琐事总是很多，再加上自己是严重拖延症患者，迟迟没有付诸行动。直到最近，终于下定决心开始了这个项目。虽然现在已经是研二了，但正如那句话说的：“种一棵树最好的时间是十年前，其次是现在。”</p><p>在这篇文章里，主要写一下自己搭建网站的过程，以此纪念个人网站的诞生。</p><h2 id="二、搭建流程"><a href="#二、搭建流程" class="headerlink" title="二、搭建流程"></a>二、搭建流程</h2><h3 id="1-建立-Github-仓库"><a href="#1-建立-Github-仓库" class="headerlink" title="1. 建立 Github 仓库"></a>1. 建立 Github 仓库</h3><p>在注册 GitHub 账号后，首先创建一个新的仓库，用作你本地博客仓库的部署。仓库名需要遵循特定格式：<code>用户名.github.io</code>，例如：<br><a href="https://github.com/chengz23/chengz23.github.io">https://github.com/chengz23/chengz23.github.io</a></p><p>请特别注意，仓库名必须是 “用户名.github.io” 这种格式，这样才能通过访问 <code>用户名.github.io</code> 来查看你的网站。如果仓库名不符合这个格式，网站的访问地址将变为 <code>用户名.github.io/仓库名</code>。从美学和简洁性的角度来看，大家自然还是偏好前者，哈哈。<br>创建完成后，你就可以直接在浏览器中输入 <code>用户名.github.io</code> 来访问自己的网站啦。</p><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h3><p>Git 作为一款分布式版本控制系统，在代码管理与协作开发领域应用广泛。在本教程里，我们会借助 Git 将本地的 Hexo 项目（Hexo 是用于搭建个人博客的项目，后续会详细介绍）推送至 GitHub 仓库，以实现代码的在线存储与便捷访问。</p><p>首先，Windows 用户可从 <a href="https://git-scm.com/downloads">Git 官网</a> 下载并安装 Git。 安装过程建议采用默认配置，不过有一点需要留意：在安装期间，会出现一个关于是否选择 <strong>MinTTY 终端模拟器</strong> 的选项。若你期望拥有功能更强大的终端界面，可勾选此选项；若不勾选，将使用 Windows 自带的 cmd 终端来显示 Git Bash。其余选项保持默认即可。安装完成后，Git 会自动添加到系统的环境变量中。<br>安装完成后，可通过以下操作检查 Git 是否安装成功：打开 cmd（命令行终端），输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Git 的版本信息。<br>在开始使用 Git 之前，我们需要进行一些个人信息的配置，从而绑定 GitHub 账号。打开 cmd，依次输入以下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;chengz23&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>其中，<code>user.name</code> 是你在 GitHub 上的用户名，<code>user.email</code> 是你注册 GitHub 账号时使用的邮箱地址。这些配置有助于 Git 识别你的身份，确保你提交的代码能与 GitHub 账户关联起来。 </p><h3 id="3-生成-SSH-密钥与-GitHub-账户关联"><a href="#3-生成-SSH-密钥与-GitHub-账户关联" class="headerlink" title="3. 生成 SSH 密钥与 GitHub 账户关联"></a>3. 生成 SSH 密钥与 GitHub 账户关联</h3><p>SSH（Secure Shell）是一种加密网络协议，用于在网络中安全地传输数据。在 Git 中，SSH 用于在本地和远程仓库之间建立安全连接，以便进行代码的推送和拉取。因此，我们需要生成 SSH 密钥，并将公钥添加到 GitHub 账户中。<br>在 cmd 中输入以下命令，生成 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;316605928.com&quot;</span><br></code></pre></td></tr></table></figure><p>完成后，在提示路径下找到 .ssh 文件夹中的 id_rsa.pub 公钥文件，用记事本打开拷贝。<br>在 GitHub 个人设置中找到 SSH，新建，输入 Key。<br>(如果之前和服务器连接时已经生成过 SSH 密钥，无需再次生成直接将公钥添加到 GitHub 账户中即可。)</p><h3 id="4-安装-Node-js"><a href="#4-安装-Node-js" class="headerlink" title="4. 安装 Node.js"></a>4. 安装 Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以让 JavaScript 代码在服务器端运行。在本教程中，我们将使用 Node.js 来安装 Hexo，以及在本地预览和生成博客网站。<br>首先，从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装 Node.js。<br>安装完成后，可通过以下操作检查 Node.js 是否安装成功：打开 cmd，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>若成功安装，命令行将显示 Node.js 和 npm 的版本信息。</p><h3 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5. 安装 Hexo"></a>5. 安装 Hexo</h3><p>Hexo 是一款基于 Node.js 开发的博客框架，以其快速、简洁和高效著称。借助 Hexo，用户能够轻松搭建个人博客网站，并且它对 Markdown 语法提供良好支持，这意味着在写作时无需进行繁琐的排版工作，极大地提升了博客创作的效率。</p><p>以下是安装 Hexo 的详细步骤：</p><ol><li><strong>安装 Hexo 命令行工具</strong>：打开安装后的Git Bash，输入以下命令并执行，以全局安装 Hexo 命令行工具：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><strong>检查安装是否成功</strong>：安装完成后，为确认 Hexo 是否正确安装，再次打开 cmd，输入如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure>若安装成功，命令行界面将显示出 Hexo 的版本信息。</li><li><strong>创建并初始化 Hexo 项目</strong>：<ul><li>在电脑的任意位置，新建一个名为 <code>MyBlog</code> 的文件夹，用于存放 Hexo 项目。</li><li>在Git Bash，使用 <code>cd *:/**/MyBlog</code> 命令（需将 <code>*:/**</code> 替换为实际的路径）进入该文件夹。</li><li>在文件夹目录下，输入以下命令，初始化 Hexo 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure>执行该命令后，会在 <code>MyBlog</code> 文件夹下生成一个名为 <code>blog</code> 的 Hexo 项目。</li></ul></li><li><strong>进入项目目录并安装依赖</strong>：<ul><li>使用 <code>cd blog</code> 命令进入刚刚生成的 <code>blog</code> 项目文件夹，此时可以查看项目的目录结构。</li><li>在项目目录下，输入以下命令，安装 Hexo 运行所需的依赖项：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>生成本地预览</strong>：依赖安装完成后，输入以下命令，启动本地服务器，预览 Hexo 博客：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server 或 hexo s<br></code></pre></td></tr></table></figure>在浏览器中输入 <code>http://localhost:4000</code>，即可查看 Hexo 博客的本地预览效果。之后按下 <code>Ctrl + C</code> 即可终止预览。<br>通过以上步骤，你就可以成功安装并初步运行 Hexo 博客项目了。</li></ol><h3 id="6-编写博客文档"><a href="#6-编写博客文档" class="headerlink" title="6. 编写博客文档"></a>6. 编写博客文档</h3><p>在 Hexo 项目中，博客文档以 Markdown 文件的形式存在，用户可以通过编辑 Markdown 文件来撰写博客内容。在 Hexo 项目的 <code>source/_posts</code> 目录下，存放着所有的博客文档，每篇博客对应一个 Markdown 文件。<br>在 <code>source/_posts</code> 目录下，新建一个名为 <code>Hello-World.md</code> 的 Markdown 文件（正常来说<code>Hello-World.md</code>是已存在的），输入任意内容后保存。<br>在 <code>blog</code> 项目目录下，依次输入以下命令，生成静态页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean 或 hexo c // 清除缓存<br>hexo generate 或 hexo g // 生成静态页面<br>hexo server 或 hexo s // 启动本地服务器<br></code></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost:4000</code>，即可查看博客更改后的最新内容。之后按下 <code>Ctrl + C</code> 即可终止预览。</p><h3 id="7-配置与部署-Hexo-博客到-GitHub-Pages"><a href="#7-配置与部署-Hexo-博客到-GitHub-Pages" class="headerlink" title="7. 配置与部署 Hexo 博客到 GitHub Pages"></a>7. 配置与部署 Hexo 博客到 GitHub Pages</h3><h4 id="配置-config-yml-文件"><a href="#配置-config-yml-文件" class="headerlink" title="配置 _config.yml 文件"></a>配置 <code>_config.yml</code> 文件</h4><p>在 Hexo 项目的根目录下，找到并打开 <code>_config.yml</code> 文件。此文件是 Hexo 项目的重要配置文件，下面将对其中的部分关键配置项进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site 部分：你可以根据自己的需求自定义博客的名称、描述、关键词等信息</span><br><span class="hljs-comment"># URL 部分：请将链接替换为你自己的 GitHub Pages 地址，示例：https://chengz23.github.io</span><br><span class="hljs-comment"># Deployment 部分：配置部署相关信息</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-comment"># 请将此地址替换为你自己的仓库 git 地址，示例：git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:chengz23/chengz23.github.io.git</span><br><span class="hljs-comment"># 分支名称，旧版本默认是 master，现在一般使用 main</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="安装-git-插件"><a href="#安装-git-插件" class="headerlink" title="安装 git 插件"></a>安装 git 插件</h4><p>在当前博客所在的目录，也就是 <code>*:/**/MyBlog</code> 目录下（注意将 <code>*:/**</code> 替换为实际的路径），执行以下命令来安装用于部署的 git 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h4 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h4><p>在 <code>blog</code> 项目目录下，按顺序输入以下命令，即可将博客部署到 GitHub Pages：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存，此命令可选择使用 hexo clean 或者 hexo c</span><br>hexo clean 或 hexo c<br><span class="hljs-comment"># 生成静态页面，可使用 hexo generate 或者 hexo g</span><br>hexo generate 或 hexo g<br><span class="hljs-comment"># 部署到 GitHub Pages，可使用 hexo deploy 或者 hexo d</span><br>hexo deploy 或 hexo d<br></code></pre></td></tr></table></figure><p>注意之后每次更新博客内容后，不需要执行 <code>hexo clean</code>, Hexo 会自动处理新文章与修改内容，在你运行 <code>hexo generate</code> 或者 <code>hexo g</code> 时，它会生成新的静态文件。如果在生成或者部署博客时碰到问题，像页面未更新、样式错乱等，很可能是缓存文件引发的。这时你可以运行 <code>hexo clean</code> 来清除缓存，然后重新生成静态文件。在更新博客主题之后，执行 <code>hexo clean</code> 可以避免旧主题文件残留，确保新主题正常显示。</p><h4 id="查看博客网站"><a href="#查看博客网站" class="headerlink" title="查看博客网站"></a>查看博客网站</h4><p>当部署完成后，打开浏览器，在地址栏输入你之前配置的 GitHub Pages 地址（例如 <code>https://chengz23.github.io</code> ，需替换为你自己的域名），就可以看到你的博客网站了。 </p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人网站搭建教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/26/hello-world/"/>
    <url>/2025/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>初识博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
